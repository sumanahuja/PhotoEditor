type: edu
files:
- name: src/main/java/org/hyperskill/photoeditor/MainActivity.kt
  visible: true
  text: |-
    package org.hyperskill.photoeditor

    import android.app.Activity
    import android.content.Intent
    import android.graphics.Bitmap
    import android.graphics.Color
    import android.os.Bundle
    import android.provider.MediaStore
    import android.view.View
    import android.widget.ImageView
    import androidx.activity.result.ActivityResult
    import androidx.activity.result.ActivityResultLauncher
    import androidx.activity.result.contract.ActivityResultContracts.StartActivityForResult
    import androidx.appcompat.app.AppCompatActivity


    class MainActivity : AppCompatActivity() {

        private lateinit var currentImage: ImageView
        override fun onCreate(savedInstanceState: Bundle?) {
            super.onCreate(savedInstanceState)
            setContentView(R.layout.activity_main)
            bindViews()

            //do not change this line
            currentImage.setImageBitmap(createBitmap())
        }

        private fun bindViews() {
            currentImage = findViewById(R.id.ivPhoto)
        }

        // do not change this function
        fun createBitmap(): Bitmap {
            val width = 200
            val height = 100
            val pixels = IntArray(width * height)
            // get pixel array from source

            var R: Int
            var G: Int
            var B: Int
            var index: Int

            for (y in 0 until height) {
                for (x in 0 until width) {
                    // get current index in 2D-matrix
                    index = y * width + x
                    // get color
                    R = x % 100 + 40
                    G = y % 100 + 80
                    B = (x+y) % 100 + 120

                    pixels[index] = Color.rgb(R,G,B)

                }
            }
            // output bitmap
            val bitmapOut = Bitmap.createBitmap(width, height, Bitmap.Config.RGB_565)
            bitmapOut.setPixels(pixels, 0, width, 0, 0, width, height)
            return bitmapOut
        }
    }
  learner_created: false
- name: src/main/res/drawable/ic_launcher_background.xml
  visible: true
  learner_created: false
- name: src/main/res/drawable/myexample.jpg
  visible: true
  learner_created: false
- name: src/main/res/drawable-v24/ic_launcher_foreground.xml
  visible: true
  learner_created: false
- name: src/main/res/layout/activity_main.xml
  visible: true
  learner_created: false
- name: src/main/res/mipmap-anydpi-v26/ic_launcher.xml
  visible: true
  learner_created: false
- name: src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml
  visible: true
  learner_created: false
- name: src/main/res/values/colors.xml
  visible: true
  learner_created: false
- name: src/main/res/values/strings.xml
  visible: true
  learner_created: false
- name: src/main/res/values/styles.xml
  visible: true
  learner_created: false
- name: src/main/AndroidManifest.xml
  visible: true
  learner_created: false
- name: src/test/java/org/hyperskill/photoeditor/internals/AbstractUnitTest.kt
  visible: false
  text: |-
    package org.hyperskill.photoeditor.internals

    import android.app.Activity
    import android.app.AlertDialog
    import android.content.Intent
    import android.os.Bundle
    import android.view.View
    import org.junit.Assert.*
    import org.robolectric.Robolectric
    import org.robolectric.Shadows.shadowOf
    import org.robolectric.android.controller.ActivityController
    import org.robolectric.shadow.api.Shadow
    import org.robolectric.shadows.ShadowActivity
    import org.robolectric.shadows.ShadowAlertDialog
    import org.robolectric.shadows.ShadowLooper
    import org.robolectric.shadows.ShadowToast
    import java.time.Duration

    abstract class AbstractUnitTest<T : Activity>(clazz: Class<T>) {

        /**
         * Setup and control activities and their lifecycle
         */
        val activityController: ActivityController<T> by lazy {
            Robolectric.buildActivity(clazz)
        }

        /**
         * The activity being tested.
         *
         * It is the @RealObject of the shadowActivity
         */
        val activity : Activity by lazy {
            activityController.get()
        }

        /**
         * A Roboletric shadow object of the Activity class, contains helper methods to deal with
         * testing activities like setting permissions, peeking results of launched activities for result,
         * retrieving shown dialogs, intents and others.
         *
         * If you don't know what shadows are you can have a better understanding on that reading this
         * on roboletric documentation: http://robolectric.org/extending/
         *
         * Understanding Shadows is fundamental for Roboletric, things are not what they appear to be on
         * Roboletric because running a code on the jvm is not the same as running the code on a real/emulated device.
         * Code that expects to eventually talk to the machine won't have the machine they expect to have to talk to.
         * Shadow is how Roboletric makes things possible, they impersonate @RealObject and act when @RealObject is expected to act.
         *
         * Things in Roboletric are not what they appear to be.
         * It is possible to not notice it for the most part, but it will be essential for some other parts
         */
        val shadowActivity: ShadowActivity by lazy {
            Shadow.extract(activity)
        }

        /**
         * A Roboletric shadow object of the mainLooper. Handles enqueued runnables and also the passage of time.
         *
         * Usually used with .idleFor(someDurationValue) or .runToEndOfTasks()
         */
        val shadowLooper: ShadowLooper by lazy {
            shadowOf(activity.mainLooper)
        }

        /**
         * Use this method to setup robolectric tests.
         *
         * Will also ensure, for assertions made inside testCodeBlock, better error messages
         * to be displayed when tests are run with check button and exceptions are thrown by user
         * implementation. Avoid making assertions outside testCodeBlock although they will work as
         * expected after the block.
         * Before testCodeBlock robolectric won't be setup so it won't work as expected.
         *
         * Returns a value for convenience use, like in tests that involve navigation between Activities
         */
        fun <ReturnValue> testActivity(arguments: Intent = Intent(), savedInstanceState: Bundle = Bundle(), testCodeBlock: (Activity) -> ReturnValue): ReturnValue {
            try {
                activity.intent =  arguments
                activityController.setup(savedInstanceState)
            } catch (ex: Exception) {
                throw AssertionError("Exception, test failed on activity creation with $ex\n${ex.stackTraceToString()}")
            }

            return try {
                testCodeBlock(activity)
            } catch (ex: Exception) {
                throw AssertionError("Exception. Test failed on activity execution with $ex\n${ex.stackTraceToString()}")
            }
        }

        /**
         * Use this method to find views.
         *
         * The view existence will be assert before being returned
         */
        inline fun <reified T> Activity.findViewByString(idString: String): T {
            val id = this.resources.getIdentifier(idString, "id", this.packageName)
            val view: View? = this.findViewById(id)

            val idNotFoundMessage = "View with id \"$idString\" was not found"
            val wrongClassMessage = "View with id \"$idString\" is not from expected class. " +
                    "Expected ${T::class.java.simpleName} found ${view?.javaClass?.simpleName}"

            assertNotNull(idNotFoundMessage, view)
            assertTrue(wrongClassMessage, view is T)

            return view as T
        }

        /**
         * Use this method to find views.
         *
         * The view existence will be assert before being returned
         */
        inline fun <reified T> View.findViewByString(idString: String): T {
            val id = this.resources.getIdentifier(idString, "id", context.packageName)
            val view: View? = this.findViewById(id)

            val idNotFoundMessage = "View with id \"$idString\" was not found"
            val wrongClassMessage = "View with id \"$idString\" is not from expected class. " +
                    "Expected ${T::class.java.simpleName} found ${view?.javaClass?.simpleName}"

            assertNotNull(idNotFoundMessage, view)
            assertTrue(wrongClassMessage, view is T)

            return view as T
        }

        /**
         * Use this method to perform clicks. It will also advance the clock millis milliseconds and run
         * enqueued Runnable scheduled to run on main looper in that timeframe.
         * Default value for millis is 500
         *
         * Internally it calls performClick() and shadowLooper.idleFor(millis)
         */
        fun View.clickAndRun(millis: Long = 500){
            this.performClick()
            shadowLooper.idleFor(Duration.ofMillis(millis))
        }

        /**
         * Asserts that the last message toasted is the expectedMessage.
         * Assertion fails if no toast is shown with null actualLastMessage value.
         */
        fun assertLastToastMessageEquals(errorMessage: String, expectedMessage: String,) {
            val actualLastMessage: String? = ShadowToast.getTextOfLatestToast()
            assertEquals(errorMessage, expectedMessage, actualLastMessage)
        }

        /**
         * Use this method to retrieve the latest AlertDialog.
         *
         * The existence of such AlertDialog will be asserted before returning.
         *
         * Robolectric only supports android.app.AlertDialog, test will not be
         * able to find androidx.appcompat.app.AlertDialog.
         *
         * - Important!!! :
         * When writing stage description state explicitly the correct version that should be imported
         */
        fun getLatestDialog(): AlertDialog {
            val latestAlertDialog = ShadowAlertDialog.getLatestAlertDialog()

            assertNotNull(
                "There was no AlertDialog found. Make sure to import android.app.AlertDialog version",
                latestAlertDialog
            )

            return latestAlertDialog!!
        }
    }
  learner_created: false
- name: src/test/java/org/hyperskill/photoeditor/internals/CustomShadowBitmap.kt
  visible: false
  text: |-
    package org.hyperskill.photoeditor.internals

    import android.graphics.Bitmap
    import org.robolectric.annotation.Implementation
    import org.robolectric.annotation.Implements
    import org.robolectric.shadows.ShadowBitmap
    import java.io.OutputStream

    // version 1.5
    @Implements(Bitmap::class)
    class CustomShadowBitmap : ShadowBitmap() {
        /**
         * These values won't be reset automatically for each @Test.
         *
         * Use init() for tests that use CustomShadowBitmap, if many tests use it consider calling this
         * on a setup method annotated with @Before or equivalent annotation
         */
        object LastCompressed {
            var compressedFormat : Bitmap.CompressFormat? = null
            var compressedBitmap : Bitmap? = null
            var compressedQuality : Int? = null
            var compressedStream : OutputStream? = null

            fun init() {
                compressedFormat = null
                compressedBitmap = null
                compressedQuality = null
                compressedStream = null
            }
        }

        @Implementation
        override fun compress(
            format: Bitmap.CompressFormat?,
            quality: Int,
            stream: OutputStream?
        ): Boolean {
            LastCompressed.compressedFormat = format
            LastCompressed.compressedBitmap = realBitmap
            LastCompressed.compressedQuality = quality
            LastCompressed.compressedStream = stream
            return super.compress(format, quality, stream)
        }
    }
  learner_created: false
- name: src/test/java/org/hyperskill/photoeditor/internals/PhotoEditorUnitTest.kt
  visible: false
  text: |-
    package org.hyperskill.photoeditor.internals

    import android.Manifest
    import android.app.Activity
    import android.content.ContentResolver
    import android.content.Context
    import android.content.Intent
    import android.graphics.Bitmap
    import android.graphics.Color
    import android.graphics.drawable.BitmapDrawable
    import android.net.Uri
    import android.widget.Button
    import android.widget.ImageView
    import com.google.android.material.slider.Slider
    import org.hyperskill.photoeditor.R
    import org.junit.Assert.assertEquals
    import org.junit.Assert.assertTrue
    import kotlin.math.abs

    open class PhotoEditorUnitTest<T : Activity>(clazz: Class<T>): AbstractUnitTest<T>(clazz) {

        val ivPhoto by lazy { activity.findViewByString<ImageView>("ivPhoto")
            .also(this::assertImageIsSetToDefaultBitmap)
        }

        val btnGallery by lazy { activity.findViewByString<Button>("btnGallery")
            .also { assertButtonName(it, "GALLERY", "btnGallery") }
        }

        val slBrightness by lazy { activity.findViewByString<Slider>("slBrightness")
            .also { assertSliderAttributes(it, "slBrightness") }
        }

        val btnSave by lazy { activity.findViewByString<Button>("btnSave")
            .also { assertButtonName(it, "SAVE", "btnSave") }
        }

        val slContrast by lazy { activity.findViewByString<Slider>("slContrast")
            .also { assertSliderAttributes(it, "slContrast") }
        }

        val slSaturation by lazy { activity.findViewByString<Slider>("slSaturation")
            .also { assertSliderAttributes(it, "slSaturation") }
        }

        val slGamma by lazy { activity.findViewByString<Slider>("slGamma")
            .also { assertSliderAttributes(it, "slGamma",
                0.2f, 0.2f, 4f, 1f)
            }
        }

        fun createGalleryPickActivityResultStub(activity: Activity): Intent {
            val resultIntent = Intent()
            val uri = getUriToDrawable(activity, R.drawable.myexample)
            resultIntent.data = uri
            return resultIntent
        }

        fun getUriToDrawable(context: Context, drawableId: Int): Uri {
            return Uri.parse(
                ContentResolver.SCHEME_ANDROID_RESOURCE +
                        "://" + context.resources.getResourcePackageName(drawableId)
                        + '/' + context.resources.getResourceTypeName(drawableId)
                        + '/' + context.resources.getResourceEntryName(drawableId)
            )
        }

        fun singleColor(source: Bitmap, x: Int = 70, y: Int = 60): Triple<Int, Int, Int> {
            val pixel = source.getPixel(x, y)

            val red = Color.red(pixel)
            val green = Color.green(pixel)
            val blue = Color.blue(pixel)

            return  Triple(red,green,blue)
        }

        fun assertImageIsSetToDefaultBitmap(ivPhoto: ImageView) {
            val messageInitialImageNull = "Initial image was null, it should be set with ___.setImageBitmap(createBitmap())"
            val messageWrongInitialImage = "Is defaultBitmap set correctly? It should be set with ___.setImageBitmap(createBitmap())"
            val actualBitmap = (ivPhoto.drawable as BitmapDrawable?)?.bitmap ?: throw AssertionError(
                messageInitialImageNull
            )
            assertTrue(messageWrongInitialImage, 200 == actualBitmap.width)
            assertTrue(messageWrongInitialImage, 100 == actualBitmap.height)
            val expectedRgb = Triple(110, 140, 150)
            assertTrue(messageWrongInitialImage, expectedRgb == singleColor(actualBitmap))
        }

        fun assertButtonName(btn: Button, expectedInitialText: String, btnName: String) {
            assertEquals("Wrong text for $btnName",
                expectedInitialText.uppercase(), btn.text.toString().uppercase()
            )
        }

        fun assertColorsValues(message: String, expected: Triple<Int, Int, Int>, actual: Triple<Int, Int, Int>, marginError: Int) {
            val messageWrongValuesFormat = "%s expected: <(%d, %d, %d)> actual: <(%d, %d, %d)>"
            val (expectedRed, expectedGreen, expectedBlue) = expected
            val (actualRed, actualGreen, actualBlue) = actual

            val messageWrongValues = messageWrongValuesFormat.format( message,
                expectedRed, expectedGreen, expectedBlue,
                actualRed, actualGreen, actualBlue
            )

            assertTrue(messageWrongValues, abs(expectedRed - actualRed) <= marginError)
            assertTrue(messageWrongValues, abs(expectedGreen - actualGreen) <= marginError)
            assertTrue(messageWrongValues, abs(expectedBlue - actualBlue) <= marginError)
        }

        fun assertSliderAttributes(
            slider: Slider, sliderName: String, expectedStepSize: Float = 10f,
            expectedValueFrom: Float = -250f, expectedValueTo: Float = 250f, expectedValue: Float = 0f) {

            val message1 = "\"$sliderName\" should have proper stepSize attribute"
            assertEquals(message1, expectedStepSize, slider.stepSize)

            val message2 = "\"$sliderName\" should have proper valueFrom attribute"
            assertEquals(message2, expectedValueFrom, slider.valueFrom)

            val message3 = "\"$sliderName\" should have proper valueTo attribute"
            assertEquals(message3, expectedValueTo, slider.valueTo)

            val message4 = "\"$sliderName\" should have proper initial value"
            assertEquals(message4, expectedValue, slider.value)
        }

        fun checkPermissionWasAsked () {

            btnSave.clickAndRun()
            shadowLooper.runToEndOfTasks()

            val messagePermissionRequired = "Have you asked permission to write?"
            val permissionRequest = shadowActivity.lastRequestedPermission ?: throw AssertionError(
                messagePermissionRequired)

            val hasRequestedPermission =
                permissionRequest.requestedPermissions.any { it == Manifest.permission.WRITE_EXTERNAL_STORAGE }
            assert(hasRequestedPermission) { messagePermissionRequired }

            val actualRequestCode = permissionRequest.requestCode
            val expectedRequestCode = 0
            val messageWrongRequestCode =
                "Did you use the requestCode stated on description while requiring permissions?"
            assertEquals(messageWrongRequestCode, expectedRequestCode, actualRequestCode)

        }
    }
  learner_created: false
- name: src/test/java/org/hyperskill/photoeditor/Stage1UnitTest.kt
  visible: false
  text: |-
    package org.hyperskill.photoeditor

    import android.app.Activity
    import android.content.Intent
    import android.provider.MediaStore
    import org.hyperskill.photoeditor.internals.PhotoEditorUnitTest
    import org.junit.Assert.*
    import org.junit.FixMethodOrder
    import org.junit.Test
    import org.junit.runner.RunWith
    import org.junit.runners.MethodSorters
    import org.robolectric.RobolectricTestRunner
    import org.robolectric.Shadows.shadowOf

    // version 2.0
    @FixMethodOrder(MethodSorters.NAME_ASCENDING)
    @RunWith(RobolectricTestRunner::class)
    class Stage1UnitTest : PhotoEditorUnitTest<MainActivity>(MainActivity::class.java) {

        companion object {
            const val messageIntentNotFound = "No intent was found by tests. Have you launched an intent?"
        }

        @Test
        fun test01_checkImageView() {
            testActivity {
                ivPhoto
            }
        }

        @Test
        fun test02_checkButtonGallery() {
            testActivity {
                btnGallery
            }
        }

        @Test
        fun test03_checkButtonOpensGallery() {
            testActivity {
                btnGallery.clickAndRun()

                val expectedIntent = Intent(
                    Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI
                )

                val actualIntent = shadowActivity.nextStartedActivity
                    ?: throw AssertionError(messageIntentNotFound)

                assertTrue(
                    "Intent found was different from expected." +
                            " expected <$expectedIntent> actual <$actualIntent>",
                    actualIntent.filterEquals(expectedIntent)
                )
            }
        }

        @Test
        fun test04_checkButtonLoadsImage() {
            testActivity {
                ivPhoto
                btnGallery.clickAndRun()

                val activityResult = createGalleryPickActivityResultStub(activity)
                val intent = shadowActivity.peekNextStartedActivityForResult()?.intent
                    ?: throw AssertionError(messageIntentNotFound)

                shadowActivity.receiveResult(
                    intent, Activity.RESULT_OK, activityResult
                )
                shadowLooper.runToEndOfTasks()

                val messageNullAfterLoading = "Image was null after loading from gallery"
                assertNotNull(messageNullAfterLoading, ivPhoto.drawable)

                val actualDrawableId: Int = try {
                    // shadowOf(ivPhoto.drawable) can throw NullPointer if .setImageBitmap(null)
                    shadowOf(ivPhoto.drawable).createdFromResId
                } catch (ex: NullPointerException) {
                    throw AssertionError(messageNullAfterLoading)
                }

                assertEquals("Drawable loaded is different from expected.",
                    R.drawable.myexample, actualDrawableId
                )
            }
        }
    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    apply plugin: 'com.android.application'
    apply plugin: 'kotlin-android'

    android {
      compileSdkVersion hs.android.compileSdkVersion

      defaultConfig {

        applicationId "org.hyperskill.photoeditor"
        minSdkVersion hs.android.minSdkVersion
        targetSdkVersion hs.android.targetSdkVersion
        versionCode 1
        versionName '1.0'
      }

      buildFeatures {
        viewBinding true
      }
    }

    dependencies {
      def kotlinVersion = hs.android.kotlinVersion
      implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"

      def coreKtx = hs.android.lib.coreKtx
      implementation "androidx.core:core-ktx:$coreKtx"

      def appCompat = hs.android.lib.appCompat
      implementation "androidx.appcompat:appcompat:$appCompat"

      def constraintLayout = hs.android.lib.constraintLayout
      implementation "androidx.constraintlayout:constraintlayout:$constraintLayout"

      def material = hs.android.lib.material
      implementation "com.google.android.material:material:$material"
    }
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/18740#comment
status: Solved
feedback:
  message: Congratulations!
  time: Mon, 20 Feb 2023 00:48:25 UTC
record: 1
